
;;  __        __             __   ___
;; |__)  /\  /  ` |__/  /\  / _` |__
;; |    /~~\ \__, |  \ /~~\ \__> |___
;;                      __   ___        ___      ___
;; |\/|  /\  |\ |  /\  / _` |__   |\/| |__  |\ |  |
;; |  | /~~\ | \| /~~\ \__> |___  |  | |___ | \|  |
;;(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(send-mail-function (quote smtpmail-send-it)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'upcase-region 'disabled nil)

;;注释反注释
(defun qiang-comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
If no region is selected and current line is not blank and we are not at the end of the line,
then comment current line.
Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))
(global-set-key "\M-1" 'qiang-comment-dwim-line)
;;语法高亮
(require 'org)
(setq org-src-fontify-natively t)
;;字体
(set-language-environment 'UTF-8)
(set-locale-environment "UTF-8")
(set-default-font "Courier New-16")
;;(set-fontset-font "fontset-default" 'unicode '("WenQuanYi Zen Hei"
;;					       . "unicode-ttf"))
;; Setting English Font
;;(set-face-attribute
;; 'default nil :font "Consolas 12")

;; Chinese Font
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
		    charset
		    (font-spec :family "Microsoft Yahei" :size 22)))
(defvar font-list '("Microsoft Yahei" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体"))
(require 'cl)
;; find-if is in common list package

(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil t))
(find-if #'qiang-font-existsp font-list)
(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size) 
           (equal ":" (string (elt font-size 0))))
      (format "%s%s" font-name font-size)
    (format "%s %s" font-name font-size)))
					; Setting English Font
(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-font-size)
  "english-font-size could be set to \":pixelsize=16\" or a integer.
If set/leave chinese-font-size to nil, it will follow english-font-size"
  (require 'cl)                        
  (let ((en-font (qiang-make-font-string
                  (find-if #'qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #'qiang-font-existsp chinese-fonts)
                            :size chinese-font-size)))
    
    ;; Set the default English font
    ;; 
    ;; The following 2 method cannot make the font settig work in new frames.
    ;; (set-default-font "Consolas:pixelsize=18")
    ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
    ;; We have to use set-face-attribute
    (message "Set English Font to %s" en-font)
    (set-face-attribute
     'default nil :font en-font)
    
    ;; Set Chinese font 
    ;; Do not use 'unicode charset, it will cause the english font setting invalid
    (message "Set Chinese Font to %s" zh-font)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset
                        zh-font))))
(qiang-set-font
 '("Consolas" "Monaco" "DejaVu Sans Mono" "Monospace" "Courier New") ":pixelsize=18"
 '("Microsoft Yahei" "文泉驿等宽微米黑" "黑体" "新宋体" "宋体"))

;;全局
(defun open-init-file()
  (interactive)
  (find-file "~/.emacs"))
;; 这一行代码，将函数 open-init-file 绑定到 <C-f11> 键上
(global-set-key [(C-f11)] 'open-init-file) 
;;这里打开终端的快捷键
(global-set-key "\C-e" 'ansi-term)
;;这里打开Ace-jump-mode快捷键
(global-set-key [(C-f8)] 'ace-jump-mode)

;;这里打开替换的快捷键
(global-set-key [(C-f9)] 'replace-string)  
;;恢复文件

(global-auto-revert-mode 1)
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path "~/.emacs.d/elpa/")
(require 'subdirs)
;; Package Management
;; -----------------------------------------------------------------
;;(require 'init-packages)
;;(require 'frame-bufs)
;;(require 'init-moden)
;;魔性主题，可以作为参考

;;(color-theme-courior)
;;自动格式化代码
(dolist (command '(yank yank-pop))
  (eval
   `(defadvice ,command (after indent-region activate)
      (and (not current-prefix-arg)
           (member major-mode
                   '(emacs-lisp-mode
                     lisp-mode
                     clojure-mode
                     scheme-mode
                     haskell-mode
                     ruby-mode
                     rspec-mode
                     python-mode
                     c-mode
                     c++-mode
                     objc-mode
                     latex-mode
                     js-mode
                     plain-tex-mode))
           (let ((mark-even-if-inactive transient-mark-mode))
             (indent-region (region-beginning) (region-end) nil))))))

;;PPT
(require 'muse-mode)  
(require 'muse-slidy) 
;;主题
(require 'color-theme)
;;(require 'FlatUI)
(require 'color-theme-blackboard)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-blackboard)))
;;上网w3m
(defun w3m-link-numbering (&rest args)
  "Make overlays that display link numbers."
  (when w3m-link-numbering-mode
    (save-excursion
      (goto-char (point-min))
      (let ((i 0)
            overlay num)
        (catch 'already-numbered
          (while (w3m-goto-next-anchor)
            ;; 这里判断是否是一个锚链接
            (when (w3m-anchor)
              (when (get-char-property (point) 'w3m-link-numbering-overlay)
                (throw 'already-numbered nil))
              (setq overlay (make-overlay (point) (1+ (point)))
                    num (format "[%d]" (incf i)))
              (w3m-static-if (featurep 'xemacs)
                  (progn
                    (overlay-put overlay 'before-string num)
                    (set-glyph-face (extent-begin-glyph overlay)
                                    'w3m-link-numbering))
                (w3m-add-face-property 0 (length num) 'w3m-link-numbering num)
                (overlay-put overlay 'before-string num)
                (overlay-put overlay 'evaporate t))
              (overlay-put overlay 'w3m-link-numbering-overlay i))))))))

;;自己的设置
(require 'mysettings)

